https://nextjs.org/docs/basic-features/built-in-css-support#css-in-js
https://github.com/vercel/next.js
https://github.com/vercel/next.js/tree/canary/examples/with-typescript-styled-components
https://github.com/leerob/mastering-nextjs/tree/master/course/styling/04-styled-components
https://github.com/vercel/next.js/tree/master/examples/with-styled-components
https://github.com/vercel/next.js/tree/master/examples/with-typescript
https://github.com/vercel/next.js/tree/master/examples/with-typescript-styled-components
https://github.com/vercel/next.js/tree/master/examples/with-typescript-eslint-jest

=============================================================================================

ahuang23@CMC02FC0ZCML85 projects % npx create-next-app my-next10-app --typescript
Need to install the following packages:
  create-next-app
Ok to proceed? (y) y
Creating a new Next.js app in /Users/ahuang23/projects/my-next10-app.

TestCafe:
=================
ahuang23@CMC02FC0ZCML85 projects % npm i -g testcafe
ahuang23@CMC02FC0ZCML85 my-next10-app % testcafe chrome tests

Style-jsx
=================
https://github.com/vercel/next.js/issues/3432
https://github.com/giuseppeg/styled-jsx-plugin-sass
https://github.com/giuseppeg/styled-jsx-plugin-postcss
https://github.com/vercel/styled-jsx/issues/310
C:\Temp\my-next10-app>npm i --save-dev @types/styled-jsx
C:\Temp\my-next10-app>npm install --save-dev styled-jsx-plugin-sass
C:\Temp\my-next10-app>npm install --save-dev node-sass

Get rip of the follow error through "import css from 'styled-jsx/css';"
"
However I wouldn't recommend that since css produces both scoped and global styles.
We need to optimize that in the future so that styles like that are tree-shakeable and tools can do dead code elimination.
"
- Need to investigate this one can work with typescript, seems keep throwing the error of...
    react-dom.development.js?61bb:67 Warning: Received `true` for a non-boolean attribute `jsx`.
    If you want to write it to the DOM, pass a string instead: jsx="true" or jsx={value.toString()}.

- Need to investigate how nesting working with a plugin...



Styled-component:
==========================
npx create-next-app --example with-typescript-styled-components with-typescript-styled-components-app
ahuang23@CMC02FC0ZCML85 my-next10-app % npm install styled-components
ahuang23@CMC02FC0ZCML85 my-next10-app % npm i --save-dev @types/styled-components
ahuang23@CMC02FC0ZCML85 my-next10-app % npm install babel-plugin-styled-components --save-dev

  "plugins": [["styled-components", {"ssr": true }]]
  "plugins": ["inline-react-svg", ["styled-components", { "displayName": true, "preprocess": false, "ssr": true }]]
doesn't seem to make a different, still output as:
  <h1 class="pages__Title-rs8gre-0 cVtDEB">My page test</h1>

When wrapping a Link from next/link within a styled-component, the as prop provided by styled will collide with the
Link's as prop and cause styled-components to throw an Invalid tag error. To avoid this, you can either use the
recommended forwardedAs prop from styled-components or use a different named prop to pass to a styled Link.


Typescript:
===================
https://github.com/vercel/next.js/blob/master/examples/with-typescript/pages/users/%5Bid%5D.tsx
https://github.com/vercel/next.js/blob/master/examples/with-typescript/pages/api/users/index.ts

type Props = {
  item?: User
  errors?: string
}
const StaticPropsDetail = ({ item, errors }: Props) => {..}

export const getStaticProps: GetStaticProps = async ({ params }) => {
  try {
    ...
  }
}

export const getStaticPaths: GetStaticPaths = async () => {
  // Get the paths we want to pre-render based on users
  const paths = sampleUserData.map((user) => ({
    params: { id: user.id.toString() },
  }))

  // We'll pre-render only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}

const handler = (_req: NextApiRequest, res: NextApiResponse) => {
  try {
    if (!Array.isArray(sampleUserData)) {
      throw new Error('Cannot find user data')
    }

    res.status(200).json(sampleUserData)
  } catch (err) {
    res.status(500).json({ statusCode: 500, message: err.message })
  }
}

prettier
=================
.prettierrc
----------------
{
  "semi": false,
  "singleQuote": true
}
.prettierignore
------------------
node_modules
.next
yarn.lock
package-lock.json
public

jest
===============
jest.config.js
module.exports = {
  roots: ['<rootDir>'],
  moduleFileExtensions: ['ts', 'tsx', 'js', 'json', 'jsx'],
  testPathIgnorePatterns: ['<rootDir>[/\\\\](node_modules|.next)[/\\\\]'],
  transformIgnorePatterns: ['[/\\\\]node_modules[/\\\\].+\\.(ts|tsx)$'],
  transform: {
    '^.+\\.(ts|tsx)$': 'babel-jest',
  },
  watchPlugins: [
    'jest-watch-typeahead/filename',
    'jest-watch-typeahead/testname',
  ],
  moduleNameMapper: {
    '\\.(css|less|sass|scss)$': 'identity-obj-proxy',
    '\\.(gif|ttf|eot|svg|png)$': '<rootDir>/test/__mocks__/fileMock.js',
  },
}

eslint
=============
https://github.com/vercel/next.js/blob/master/examples/with-typescript-eslint-jest/.eslintrc.json
https://github.com/vercel/next.js/blob/master/examples/with-typescript-eslint-jest/.eslintignore

husky
==========
https://github.com/vercel/next.js/blob/master/examples/with-typescript-eslint-jest/package.json
