https://www.freecodecamp.org/news/the-next-js-handbook/
https://www.freecodecamp.org/news/the-next-js-handbook/#analyzing-the-app-bundles
https://www.freecodecamp.org/news/the-next-js-handbook/#lazy-loading-modules
https://www.freecodecamp.org/news/the-next-js-handbook/#feed-data-to-the-components-using-getinitialprops



https://onoufriosm.medium.com/react-best-practices-react-at-scale-part-1-74234290ef19
https://onoufriosm.medium.com/react-best-practices-react-at-scale-part-2-11b69b96f5e
https://hackernoon.com/react-project-structure-best-practices-kh20323x

https://www.netlify.com/blog/2020/12/02/next.js-should-i-use-ssr-or-ssg/
https://snipcart.com/blog/react-nextjs-single-page-application-seo
https://medium.com/weekly-webtips/next-js-on-the-server-side-notes-to-self-e2170dc331ff
https://web.dev/introducing-aurora/
https://nextjs.org/blog
https://web.dev/conformance/

Search keyword: "next js best practices"


Analysis Bundle
Lazy loading modules
Use the <Image> from nextjs
Analyze and monitor with Google Webmaster Tools and web.dev
Adding a sitemap
Web Vital
Conformance for Frameworks
=================================================================

Analysis Bundle:
----------------------
https://www.freecodecamp.org/news/the-next-js-handbook/#analyzing-the-app-bundles

"analyze": "cross-env ANALYZE=true next build",
"analyze:server": "cross-env BUNDLE_ANALYZE=server next build",
"analyze:browser": "cross-env BUNDLE_ANALYZE=browser next build"

npm install --dev cross-env @next/bundle-analyzer

Create a next.config.js file in the project root, with this content:
        const withBundleAnalyzer = require('@next/bundle-analyzer')({
          enabled: process.env.ANALYZE === 'true'
        })

        module.exports = withBundleAnalyzer({})

Now run the command

        npm run analyze


=================================================================


Lazy loading modules
--------------------------------
https://www.freecodecamp.org/news/the-next-js-handbook/#lazy-loading-modules
What we can do instead is separating all the Moment code in a separate bundle.
How? Instead of importing Moment at the component level, we perform an async import inside getInitialProps, and we calculate the value to send to the component.

don't use:
        import moment from 'moment'

        ...

        const Post = props => {
          return (
            <div>
              <h1>{props.post.title}</h1>
              <p>Published on {moment().format('dddd D MMMM YYYY')}</p>
              <p>{props.post.content}</p>
            </div>
          )
        }

use:
        import posts from '../../posts.json'

        const Post = props => {
          return (
            <div>
              <h1>{props.post.title}</h1>
              <p>Published on {props.date}</p>
              <p>{props.post.content}</p>
            </div>
          )
        }

        Post.getInitialProps = async ({ query }) => {                       <<<<<< Never seen this method before...
          const moment = (await import('moment')).default()
          return {
            date: moment.format('dddd D MMMM YYYY'),
            post: posts[query.id]
          }
        }

        export default Post


=================================================================

Use the <Image> from nextjs
---------------------------------

        import Image from 'next/image'

        function Home() {
          return (
            <>
              <h1>My Homepage</h1>
              <Image
                src="/me.png"
                alt="Picture of the author"
                width={500}
                height={500}
              />
              <p>Welcome to my homepage!</p>
            </>
          )
        }

        export default Home

=================================================================

React form:
------------------
https://nextjs.org/blog/forms
https://www.w3.org/WAI/tutorials/forms/
https://reactjs.org/docs/uncontrolled-components.html

=================================================================

test files location:
-----------------------------
https://frontend-digest.com/setting-up-testing-library-with-nextjs-a9702cbde32d
https://medium.com/@miiny/unit-test-next-js-with-jest-and-enzyme-5b305a8e29fe       <<< 2018 setup.
https://www.works-hub.com/learn/how-to-test-your-next-dot-js-pages-and-components-with-jest-6c900
https://github.com/vercel/next.js/tree/canary/examples/with-jest        <<< looks like it's located outside of the page folder.

Add scripts:
"scripts": {
  "test": "jest",
  "test:watch": "jest --watch",
  "test:coverage": "jest --coverage"
},


src/tests/index.test.js         to test src/pages/index.js


=================================================================
https://snipcart.com/blog/react-nextjs-single-page-application-seo

Analyze and monitor with Google Webmaster Tools and web.dev
Luckily Google provides some free tools to handle this, including the Search Console and web.dev which will also test performance and accessibility. Performance and accessibility also happen to help SEO.
- https://search.google.com/search-console/about
- https://web.dev/


Adding a sitemap
While you can’t do this out of the box with Next.js, there are plugins to help, such as the Next.js Sitemap Generator or a custom approach like the one I added to my Next.js WordPress Starter.
- https://github.com/IlusionDev/nextjs-sitemap-generator

Optimizing for social media with Open Graph
We lightly touched on Open Graph in the tutorial, but there’s a wide variety of metadata tags and use cases that make Open Graph an important part of your SEO work.


=================================================================

Web Vitals
--------------------
How Core Web Vitals Will Impact Google Rankings in 2021 (https://www.youtube.com/watch?v=9SVe7TigqVg)
Next.js Image Component and Image Optimization (https://www.youtube.com/watch?v=h0gj4gOjz44)

Web vitals is the metric to track perceived loading speed, responsiveness, and visual stability of your website. All three essential for your website overall health.
The performance of your website can vary dramatically from user to user, or device to device, and network to network.
Before the pendamic begin, we bought 16% of our things online, now we buy nearly 34%. Covid pushed 10 years of eCommerce growth into three months.

Amazon(2009), Walmart (2012)
100ms less latency -> 1% more revenue

Largest Contentful Paint
Usually image or video. Good: less than 2.5s. Poor more than 4s

First Input Delay
The time between when a user actually click a link or button, and when the browser begins processing those event handlers.
Bad example: you click on an element, and nothing happens when you click and you get frustrated and you click a bunch more times.
Good: less than 100ms. Poor more than 300ms.

Cumulative Layout Shift
Good: less than 0.1. Poor: more than 0.25

Solution:
Pre-rendering Content (Need to learn about automatic static optimization)
Optimize Images (50% of the download is coming from image)
    - always give a width and height of the image (prevent layout shift)
    - lazy load (will only fetch image when you scroll down and the image appear in the view port). Add priority keywords to those needs to load first.
    - use modern image format (WebP, AVIF, same quality, lower file size)
    - use srcset (a standard html image spec, allows you to serve up different variations depends the device and viewport your user is viewing
    - blue-up placeholders
    - use layout property: fill, fixed, intrinsic. combine that with different type of fit for how you want your image to be cropped
    - .webp file is around 30% smaller than .jpeg file
Optimize Fonts
    - use a vaiable | preload font file | self-host instead of google fonts | use font-display: optional (prevent layout shift)
    - put a link tag in the head of our document to preload the font file
            <link
             rel="preload"
             href="/fonts/inter-var-latin.woff2"
             as="font"
             type="font/woff2"
             crossOrigin="anonymous"
            />
    - somewhere in our css, we define a font face.
            @font-face {
             font-family: 'Inter';
             font-style: normal;
             font-weight: 100 900; // Range of weights supported
             font-display: optional;                                    <<< We don't have cls. If you cannot resolve the request to fetch this font then show the fallback font
             src: url(/fonts/inter-var-latin.woff2) format('woff2');
             unicode-range: U+0000-00FF, U+0131, … …;
            }

Big company use next.js
HashiCorp | The washington post | airbnb (is the payment part is also in next.js?) | tripadvisor.


=================================================================

Conformance for Frameworks
------------------------------------------
https://web.dev/conformance/

2. Actionable rules
Defaults that require no developer input such as inlining critical CSS.
Require developer opt-in. For example, using a framework-provided image component to size and scale images.
Require developer opt-in and customization. For example, tagging important images to be loaded early.              <<<< !!!!
Not a specific feature but things that still require developer decision. For example, avoiding fonts or synchronous scripts that delay early rendering.
