https://www.freecodecamp.org/news/the-next-js-handbook/
https://www.freecodecamp.org/news/the-next-js-handbook/#analyzing-the-app-bundles
https://www.freecodecamp.org/news/the-next-js-handbook/#lazy-loading-modules
https://www.freecodecamp.org/news/the-next-js-handbook/#feed-data-to-the-components-using-getinitialprops


https://onoufriosm.medium.com/react-best-practices-react-at-scale-part-1-74234290ef19
https://onoufriosm.medium.com/react-best-practices-react-at-scale-part-2-11b69b96f5e
https://hackernoon.com/react-project-structure-best-practices-kh20323x

https://www.netlify.com/blog/2020/12/02/next.js-should-i-use-ssr-or-ssg/
https://snipcart.com/blog/react-nextjs-single-page-application-seo

Search keyword: "next js best practices"

Analysis Bundle
Lazy loading modules
Use the <Image> from nextjs
Analyze and monitor with Google Webmaster Tools and web.dev
Adding a sitemap
=================================================================

Analysis Bundle:
----------------------
https://www.freecodecamp.org/news/the-next-js-handbook/#analyzing-the-app-bundles

"analyze": "cross-env ANALYZE=true next build",
"analyze:server": "cross-env BUNDLE_ANALYZE=server next build",
"analyze:browser": "cross-env BUNDLE_ANALYZE=browser next build"

npm install --dev cross-env @next/bundle-analyzer

Create a next.config.js file in the project root, with this content:
        const withBundleAnalyzer = require('@next/bundle-analyzer')({
          enabled: process.env.ANALYZE === 'true'
        })

        module.exports = withBundleAnalyzer({})

Now run the command

        npm run analyze


=================================================================


Lazy loading modules
--------------------------------
https://www.freecodecamp.org/news/the-next-js-handbook/#lazy-loading-modules
What we can do instead is separating all the Moment code in a separate bundle.
How? Instead of importing Moment at the component level, we perform an async import inside getInitialProps, and we calculate the value to send to the component.

don't use:
        import moment from 'moment'

        ...

        const Post = props => {
          return (
            <div>
              <h1>{props.post.title}</h1>
              <p>Published on {moment().format('dddd D MMMM YYYY')}</p>
              <p>{props.post.content}</p>
            </div>
          )
        }

use:
        import posts from '../../posts.json'

        const Post = props => {
          return (
            <div>
              <h1>{props.post.title}</h1>
              <p>Published on {props.date}</p>
              <p>{props.post.content}</p>
            </div>
          )
        }

        Post.getInitialProps = async ({ query }) => {                       <<<<<< Never seen this method before...
          const moment = (await import('moment')).default()
          return {
            date: moment.format('dddd D MMMM YYYY'),
            post: posts[query.id]
          }
        }

        export default Post


=================================================================

Use the <Image> from nextjs
---------------------------------

        import Image from 'next/image'

        function Home() {
          return (
            <>
              <h1>My Homepage</h1>
              <Image
                src="/me.png"
                alt="Picture of the author"
                width={500}
                height={500}
              />
              <p>Welcome to my homepage!</p>
            </>
          )
        }

        export default Home

=================================================================

React form:
------------------
https://nextjs.org/blog/forms
https://www.w3.org/WAI/tutorials/forms/
https://reactjs.org/docs/uncontrolled-components.html

=================================================================

test files location:
-----------------------------
https://frontend-digest.com/setting-up-testing-library-with-nextjs-a9702cbde32d
https://medium.com/@miiny/unit-test-next-js-with-jest-and-enzyme-5b305a8e29fe       <<< 2018 setup.
https://www.works-hub.com/learn/how-to-test-your-next-dot-js-pages-and-components-with-jest-6c900
https://github.com/vercel/next.js/tree/canary/examples/with-jest        <<< looks like it's located outside of the page folder.

Add scripts:
"scripts": {
  "test": "jest",
  "test:watch": "jest --watch",
  "test:coverage": "jest --coverage"
},


src/tests/index.test.js         to test src/pages/index.js


=================================================================
https://snipcart.com/blog/react-nextjs-single-page-application-seo

Analyze and monitor with Google Webmaster Tools and web.dev
Luckily Google provides some free tools to handle this, including the Search Console and web.dev which will also test performance and accessibility. Performance and accessibility also happen to help SEO.
- https://search.google.com/search-console/about
- https://web.dev/


Adding a sitemap
While you can’t do this out of the box with Next.js, there are plugins to help, such as the Next.js Sitemap Generator or a custom approach like the one I added to my Next.js WordPress Starter.
- https://github.com/IlusionDev/nextjs-sitemap-generator

Optimizing for social media with Open Graph
We lightly touched on Open Graph in the tutorial, but there’s a wide variety of metadata tags and use cases that make Open Graph an important part of your SEO work.

















